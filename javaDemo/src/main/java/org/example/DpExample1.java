package org.example;

import java.util.Arrays;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * @author xianr
 * @date 2023-09-22
 * @Description 最少费用爬楼梯
 */
public class DpExample1 {



    public static int minCostClimbingStairs(int[] cost) {
        // Write your code here
        int[] dp = new int[cost.length];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for (int i = 2; i < cost.length; i++) {
            dp[i] = Math.min(dp[i-1], dp[i -2]) + cost[i];
        }
        System.out.println(Arrays.toString(dp));
        return Math.min(dp[dp.length-1], dp[dp.length -2]);
    }

    public static void main(String[] args) {
        int[] cost = {200,977,377,340,714,736,905,755,511,214,140,115,900,919,419,678,673,787,920,47,614,290,491,383,641,993,12,502,175,49,468,340,570,956,625,474,927,618,856,26,948,794,508,576,418,873,68,843,476,85,412,256,579,463,82,893,546,158,651,731,3,116,16,205,395,56,908,515,353,828,411,517,284,497,381,741,433,989,414,328,628,918,341,655,572,73,359,79,578,711,330,388,77,951,287,832,481,539,163,307,721,561,478,577,203,760,414,918,895,214,385,465,532,190,646,735,601,363,508,733,685,97,22,733,454,881,231,836,235,467,657,682,821,18,656,29,925,755,835,279,605,59,311,122,24,377,960,616,542,453,532,983,640,79,284,910,875,845,612,122,809,106,286,245,217,527,302,556,272,950,587,50,411,964,542,285,238,127,78,306,905,717,587,715,940,443,301,887,6,182,218,52,601,962,2,560,477,846,239,908,256,306,591,538,326,924,5,795,821,842,726,486,114,878,404,405,955,85,517,903,373,284,210,270,958,662,420,95,961,987,492,441,950,915,485,958,376,535,893,871,679,337,374,317,837,251,532,152,21,815,711,98,597,973,774,869,790,949,325,75,511,46,961,299,392,321,749,473,28,815,722,802,42,846,138,272,208,48,457,585,96,362,771,126,329,367,836,805,146,248,628,373,48,711,93,705,821,939,688,647,523,408,476,296,752,299,340,258,607,681,9,583,23,933,916,424,342,75,811,171,705,705,145,642,147,138,635,470,898,864,737,626,112,308,605,131,864,545,785,649,258,656,286,441,119,202,99,997,549,540,394,597,610,761,517,104,938,667,834,832,9,930,451,411,745,23,886,363,990,513,214,457,986,147,371,554,662,318,377,36,754,769,965,279,125,995,628,472,733,734,416,464,53,345,689,706,197,416,835,852,414,675,646,891,726,104,782,24,691,905,690,883,96,798,990,809,601,764,612,805,83,382,9,301,148,828,104,189,596,205,758,18,337,115,385,701,27,597,12,277,272,217,354,970,327,702,401,678,859,919,11,229,191,425,436,730,602,26,436,850,350,820,260,220,677,94,70,705,858,264,142,754,70,495,327,47,182,356,882,763,321,499,270,147,940,993,938,220,90,259,66,486,139,499,230,246,487,675,998,674,121,351,55,264,379,180,669,283,528,790,22,597,317,828,808,935,571,263,917,16,727,862,679,408,349,781,890,675,919,324,433,181,369,376,994,853,648,909,619,744,307,599,705,273,689,328,778,205,643,653,18,288,142,655,708,850,471,578,721,634,100,115,679,470,207,991,277,32,676,230,56,116,784,176,225,933,723,589,211,665,696,533,193,712,484,931,863,940,238,402,415,313,124,175,64,651,500,205,767,734,718,64,824,223,359,621,549,623,521,886,146,743,854,572,587,733,33,478,588,717,239,901,331,976,213,267,595,777,318,948,859,672,737,236,294,398,249,784,889,641,81,463,297,388,704,806,368,444,99,574,726,177,52,193,838,983,180,871,623,172,245,921,319,773,894,66,673,936,632,290,739,932,520,671,439,362,200,152,471,728,148,970,753,0,747,318,221,330,460,402,175,305,199,29,663,491,672,572,890,615,687,533,533,751,87,344,909,982,302,435,311,669,192,166,24,662,454,209,594,570,137,134,607,145,785,584,441,652,289,367,719,582,512,526,302,588,713,639,288,313,1,882,59,533,774,53,469,592,852,231,402,451,173,807,44,451,137,712,796,751,509,170,500,295,778,233,472,186,439,435,887,834,379,676,513,388,787,441,835,562,945,168,27,315,299,780,221,633,425,649,206,448,864,614,563,433,158,421,21,490,999,357,217,146,518,193,439,501,432,223,347,739,591,440,211,366,968,320,515,44,316,306,834,359,833,624,574,812,292,682,30,161,279,480,449,612,135,652,30,595,684,843,65,469,116,531,220,122,65,889,381,245,546,531,511,521,621,703,143,67,352,804,574,141,664,374,764,25,45,59,620,987,725,368,647,902,657,341,596,249,485,170,657,512,438,379,249,715,919,742,271,721,109,331,653,333,979,932,17,625,955,418,614,306,867,665,220,803,536,296,364,945,86,24,44,925,241,782,495,333,70,436,152,918,459,728,220,292,730,233,554,142,513,666,446,526,509,167,536,948,428,90,451,85,190,481,99,698,589,812,328,648,24,621,241,339,954,869,588,101,282,938,793,74,16,407,704,930,164,740,64,768,525,203,499,853,95,123,385,580,829,895,489,50,944,397,914,568,121,24,618,859,985,657,509,370,401,492,685,195};
        System.out.println(minCostClimbingStairs(cost));
        boolean equals = Objects.equals(null, null);
        System.out.println(equals);

        // 快速创建线程池
        ExecutorService executor = Executors.newFixedThreadPool(4);
        try {
            // 通过Lambda表达式实现执行内容，并返回结果通过CompletableFuture接收
            CompletableFuture<String> completableFuture = CompletableFuture.supplyAsync(() -> {
                try {
                    Thread.sleep(10000L);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                System.out.println("获取商品信息成功");
                return "信息";
            }, executor);
            // 输出结果
            System.out.println(completableFuture.get());
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }finally {
            executor.shutdown();
        }
    }

}
